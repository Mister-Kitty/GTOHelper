package com.gtohelper.solver;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

class PioSolverTest {

    static ISolver solver = new PioSolver();
    final static String pioLocation = "C:\\PioSolver Edge\\PioSOLVER-edge.exe";

    @BeforeAll
    public static void setup() throws IOException {
        solver.connectAndInit(pioLocation);
    }

    @AfterAll
    public static void tearDown() {
        solver.disconnect();
    }

    void setRange1Test() throws IOException {
        solver.setRange("IP", IPRange1);
        solver.setRange("OOP", OOPRange1);
    }

    void setFlopData1Test() throws IOException {
        solver.setBoard(test1Board);
        solver.setPotAndAccuracy(0, 0, 185, 1.628F);
        solver.setEffectiveStack(910);
    }

    void initializeOptions1Test() throws IOException {
        int allInThresholdPercent = 100;
        int allInOnlyIfLessThanNPercent = 500;
        final boolean forceOOPBet = false;
        final boolean forceOOPCheckIPBet = false;
        solver.setGameTreeOptions(allInThresholdPercent, allInOnlyIfLessThanNPercent, forceOOPBet, forceOOPCheckIPBet);

        final boolean flopIso = true;
        final boolean turnIso = false;
        solver.setIsomorphism(flopIso, turnIso);
    }

    void setBetsizes1Test() {
        solver.setIPFlop(false, false, "52", "2.5x");
        solver.setOOPFlop(false, "","2.5x", "52");

        solver.setIPTurn(false, false, "52", "3x");
        solver.setOOPTurn(false, "52", "3x", "");

        solver.setIPRiver(false, false, "52", "3x");
        solver.setOOPRiver(false, "52", "3x", "");
    }

    @Test
    void getAddLines1Test() throws IOException {
        // This tree has no 'all-in threshold' or 'dont 3bet' options enabled. That's for the next tests.
        setRange1Test();
        setFlopData1Test();
        initializeOptions1Test();
        setBetsizes1Test();

        solver.clearLines();
        solver.buildTree();

        // Tree is build. Test results.
        ArrayList<String> test1SolverResults = solver.getAllInLeaves();
        for(String s : test1SolverResults) {
            assert(test1Results.contains(s));
        }

        for(String s : test1Results) {
            if(!test1SolverResults.contains(s))
                assert false;
        }

        // Results have been validated. Send the tree to Pio and validate the tree size estimate
        solver.setBuiltTreeAsActive();

        String treeSize = solver.getEstimateSchematicTree();
        assert(treeSize.equals("estimated tree size: 457 MB"));

        String showMemory = solver.getShowMemory();
        assert(!showMemory.isEmpty());

        String calc = solver.getCalcResults();
        assert(!calc.isEmpty());
    }

    @Test
    void runFullTest1() throws IOException {
        getAddLines1Test();
        solver.go();
        String calcResults = solver.waitForSolve();
        assert(!calcResults.isEmpty());
    }

    void initializeOptions2Test() throws IOException {
        int allInThresholdPercent = 100;
        int allInOnlyIfLessThanNPercent = 500;
        final boolean forceOOPBet = false;
        final boolean forceOOPCheckIPBet = false;
        solver.setGameTreeOptions(allInThresholdPercent, allInOnlyIfLessThanNPercent, forceOOPBet, forceOOPCheckIPBet);

        final boolean flopIso = true;
        final boolean turnIso = false;
        solver.setIsomorphism(flopIso, turnIso);
    }

    void setBetsizes2Test() {
        solver.setIPFlop(true, false, "52", "2.5x");
        solver.setOOPFlop(true, "","2.5x", "52");

        solver.setIPTurn(false, false, "52,allin", "3x");
        solver.setOOPTurn(false, "52", "3x", "");

        solver.setIPRiver(true, false, "52", "3x");
        solver.setOOPRiver(true, "52", "3x", "");
    }

    @Test
    void getAddLines2Test() throws IOException {
        // This tree tests 'all-in threshold' and 'dont 3bet' options.
        setRange1Test();
        setFlopData1Test();
        initializeOptions2Test();
        setBetsizes2Test();

        solver.clearLines();
        solver.buildTree();

        // Tree is build. Test results.
        ArrayList<String> test2SolverResults = solver.getAllInLeaves();
        for(String s : test2SolverResults) {
            if(!test2Results.contains(s))
                assert false;
        }

        for(String s : test2Results) {
            if(!test2SolverResults.contains(s))
                assert false;
        }

        // Results have been validated. Send the tree to Pio and validate the tree size estimate
        solver.setBuiltTreeAsActive();

        String treeSize = solver.getEstimateSchematicTree();
        assert(treeSize.equals("estimated tree size: 580 MB"));

        String showMemory = solver.getShowMemory();
        assert(!showMemory.isEmpty());

        String calc = solver.getCalcResults();
        assert(!calc.isEmpty());
    }

    final String test1Board = "Qs Jh 2h";

    final ArrayList<String> test1Results = new ArrayList<String>(
            Arrays.asList("0 0 0 0 0 96 288 672 910",
        "0 0 0 0 96 288 672 910",
        "0 0 0 96 288 288 288 684 910",
        "0 0 0 96 288 288 684 910",
        "0 0 0 96 288 672 672 672 910",
        "0 0 0 96 288 672 910",
        "0 0 0 96 96 96 292 684 910",
        "0 0 96 288 288 288 684 910",
        "0 0 96 288 672 672 672 910",
        "0 0 96 288 672 672 910",
        "0 0 96 288 672 910",
        "0 0 96 96 292 684 910",
        "0 0 96 96 96 292 684 910",
        "0 96 240 240 240 240 240 586 910",
        "0 96 240 240 240 240 586 910",
        "0 96 240 240 240 586 586 586 910",
        "0 96 240 240 240 586 910",
        "0 96 240 240 586 586 586 910",
        "0 96 240 240 586 586 910",
        "0 96 240 240 586 910",
        "0 96 240 456 456 456 456 456 910",
        "0 96 240 456 456 456 456 910",
        "0 96 240 456 456 456 910",
        "0 96 240 456 780 780 780 780 780 910",
        "0 96 240 456 780 780 780 780 910",
        "0 96 240 456 780 780 780 910",
        "0 96 240 456 780 780 910",
        "0 96 240 456 780 910",
        "0 96 96 96 292 292 292 692 910",
        "0 96 96 96 292 684 684 684 910",
        "0 96 96 96 292 684 684 910",
        "0 96 96 96 292 684 910",
        "0 96 96 96 96 292 684 910",
        "0 96 96 96 96 96 292 684 910",
        "96 240 240 240 240 240 586 910",
        "96 240 240 240 240 586 910",
        "96 240 240 240 586 586 586 910",
        "96 240 240 240 586 910",
        "96 240 456 456 456 456 456 910",
        "96 240 456 456 456 456 910",
        "96 240 456 456 456 910",
        "96 240 456 456 910",
        "96 240 456 780 780 780 780 780 910",
        "96 240 456 780 780 780 780 910",
        "96 240 456 780 780 780 910",
        "96 240 456 780 910",
        "96 96 292 292 292 692 910",
        "96 96 292 292 692 910",
        "96 96 292 684 684 684 910",
        "96 96 292 684 910",
        "96 96 96 292 292 292 692 910",
        "96 96 96 292 684 684 684 910",
        "96 96 96 292 684 684 910",
        "96 96 96 292 684 910",
        "96 96 96 96 292 684 910",
        "96 96 96 96 96 292 684 910"));

    final ArrayList<String> test2Results = new ArrayList<String>(
            Arrays.asList("0 0 0 0 0 910",
                    "0 0 0 0 0 96 288 672 910",
                    "0 0 0 0 0 96 288 910",
                    "0 0 0 0 0 96 910",
                    "0 0 0 0 910",
                    "0 0 0 0 96 288 672 910",
                    "0 0 0 0 96 288 910",
                    "0 0 0 0 96 910",
                    "0 0 0 910",
                    "0 0 0 96 288 288 288 684 910",
                    "0 0 0 96 288 288 288 910",
                    "0 0 0 96 288 288 684 910",
                    "0 0 0 96 288 288 910",
                    "0 0 0 96 288 672 672 672 910",
                    "0 0 0 96 288 672 910",
                    "0 0 0 96 96 96 292 684 910",
                    "0 0 0 96 96 96 292 910",
                    "0 0 0 96 96 96 910",
                    "0 0 96 288 288 288 684 910",
                    "0 0 96 288 288 288 910",
                    "0 0 96 288 672 672 672 910",
                    "0 0 96 288 672 672 910",
                    "0 0 96 288 672 910",
                    "0 0 96 96 292 684 910",
                    "0 0 96 96 292 910",
                    "0 0 96 96 910",
                    "0 0 96 96 96 292 684 910",
                    "0 0 96 96 96 292 910",
                    "0 0 96 96 96 910",
                    "0 910",
                    "0 96 240 240 240 240 240 586 910",
                    "0 96 240 240 240 240 240 910",
                    "0 96 240 240 240 240 586 910",
                    "0 96 240 240 240 240 910",
                    "0 96 240 240 240 586 586 586 910",
                    "0 96 240 240 240 586 910",
                    "0 96 240 240 240 910",
                    "0 96 240 240 586 586 586 910",
                    "0 96 240 240 586 586 910",
                    "0 96 240 240 586 910",
                    "0 96 240 456 456 456 456 456 910",
                    "0 96 240 456 456 456 456 910",
                    "0 96 240 456 456 456 910",
                    "0 96 240 456 780 780 780 780 780 910",
                    "0 96 240 456 780 780 780 780 910",
                    "0 96 240 456 780 780 780 910",
                    "0 96 240 456 780 780 910",
                    "0 96 240 456 780 910",
                    "0 96 240 456 910",
                    "0 96 240 910",
                    "0 96 910",
                    "0 96 96 96 292 292 292 692 910",
                    "0 96 96 96 292 292 292 910",
                    "0 96 96 96 292 684 684 684 910",
                    "0 96 96 96 292 684 684 910",
                    "0 96 96 96 292 684 910",
                    "0 96 96 96 910",
                    "0 96 96 96 96 292 684 910",
                    "0 96 96 96 96 292 910",
                    "0 96 96 96 96 910",
                    "0 96 96 96 96 96 292 684 910",
                    "0 96 96 96 96 96 292 910",
                    "0 96 96 96 96 96 910",
                    "910",
                    "96 240 240 240 240 240 586 910",
                    "96 240 240 240 240 240 910",
                    "96 240 240 240 240 586 910",
                    "96 240 240 240 240 910",
                    "96 240 240 240 586 586 586 910",
                    "96 240 240 240 586 910",
                    "96 240 240 240 910",
                    "96 240 456 456 456 456 456 910",
                    "96 240 456 456 456 456 910",
                    "96 240 456 456 456 910",
                    "96 240 456 456 910",
                    "96 240 456 780 780 780 780 780 910",
                    "96 240 456 780 780 780 780 910",
                    "96 240 456 780 780 780 910",
                    "96 240 456 780 910",
                    "96 240 456 910",
                    "96 240 910",
                    "96 910",
                    "96 96 292 292 292 692 910",
                    "96 96 292 292 292 910",
                    "96 96 292 292 692 910",
                    "96 96 292 292 910",
                    "96 96 292 684 684 684 910",
                    "96 96 292 684 910",
                    "96 96 96 292 292 292 692 910",
                    "96 96 96 292 292 292 910",
                    "96 96 96 292 684 684 684 910",
                    "96 96 96 292 684 684 910",
                    "96 96 96 292 684 910",
                    "96 96 96 910",
                    "96 96 96 96 292 684 910",
                    "96 96 96 96 292 910",
                    "96 96 96 96 910",
                    "96 96 96 96 96 292 684 910",
                    "96 96 96 96 96 292 910",
                    "96 96 96 96 96 910"));

    final String OOPRange1 = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0 0 0 0 0 0.5 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0 0 " +
            "0 0 0 0 0 0.5 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0.25 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0.25 0.25 0 0 0 " +
            "0 0 0 0 0.5 0 0 0 0.75 0.25 0.25 0.25 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0.25 0 0 0 0 0 " +
            "0 0 0 0 0 0.5 0 0 0 0.75 0 0.25 0.25 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0.25 0.25 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 " +
            "0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0" +
            " 0 0 0.75 0.5 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.5 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.5 0 0 0 0.75 0 0 0.75 0" +
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.5 0 0 0 0.75 0 0.75 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.5 0 0 0 0.75 0.75 0.75 0.75 0 0 0" +
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0.75 0 0 0 0 0 0 " +
            "0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0.75 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0.75 0.75 0.75 " +
            "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 " +
            "0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0" +
            " 0 0.75 0 0 0 0.75 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" +
            " 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 0 1 1 0" +
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 0.75 0 0 0 0.75 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " +
            "0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 1 0 0 0 0 0 0 " +
            "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " +
            "0 0 0.5 0 0 0 0.75 0 0 0 0.75 1 1 1 0 0 0 0 0 0 0 0 0.25 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 1 0 0 0 1 0.5 0.5 0.5" +
            " 0 0 0 0 0 0 0 0 0 0.25 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 1 0 0 0.5 1 0.5 0.5 1 0 0 0 0 0 0 0 0 0 0 0.25 0 0 0 " +
            "0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 1 0 0.5 0.5 1 0.5 1 1 0 0 0 0 0 0 0 0 0 0 0 0.25 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 " +
            "0 0 0 0 0 0 0 0.75 0 0 0 1 0.5 0.5 0.5 1 1 1 1 0.5 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0 1 0.5 " +
            "0.5 0.5 1 0.75 0.75 0.75 1 1 1 1 0 0.5 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0 0.5 1 0.5 0.5 0.75 1 " +
            "0.75 0.75 1 1 1 1 1 0 0 0.5 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0 0.5 0.5 1 0.5 0.75 0.75 1 0.75 1 1" +
            " 1 1 1 1 0 0 0 0.5 0 0 0 0.5 0 0 0 0.75 0 0 0 0.75 0 0 0 0.25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0.5 0.5 0.5 1 0.75 0.75 0.75 1 1 1 1 1 1 1 1";

    final String IPRange1 = "1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0" +
            " 1 1 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 " +
            "1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 " +
            "1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 " +
            "1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " +
            "0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0" +
            " 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " +
            "0 1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1" +
            " 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 " +
            "0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0.5 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1" +
            " 0 0 0 1 0 0 0.5 1 0.5 0.5 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0.5 0.5 1 0.5 0.75 0.75 0 0 0 0 0 0 0 0 0 0 0" +
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0.5 0.5 0.5 1 0.75 0.75 0.75 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0" +
            " 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 1 1 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 " +
            "0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 0.5 0.5 0.5 0.5 0 0 0 " +
            "0.5 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0.5 0.5 0.5 1 1 1 1 1 1 1 1 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0" +
            " 0 1 0 0 0 1 0 0 0.5 1 0.5 0.5 1 1 1 1 1 1 1 1 0 0 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0.5 0.5 1 0.5 1 1 1 1 1 " +
            "1 1 1 0 0 0 0 0 0.5 0 0 0 0.5 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0.5 0.5 0.5 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 " +
            "0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0.75 0.75 0.75 1 0.75 0.75 0.75 1 0.75 0.75 0.75 0 0.25 0.25 0.25 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0" +
            " 0 1 0 0 0 1 0 0 0 1 0 0 0.75 1 0.75 0.75 0.75 1 0.75 0.75 0.75 1 0.75 0.75 0.25 0 0.25 0.25 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0" +
            " 0 1 0 0 0 1 0 0.75 0.75 1 0.75 0.75 0.75 1 0.75 0.75 0.75 1 0.75 0.25 0.25 0 0.25 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0" +
            " 0 0 1 0.75 0.75 0.75 1 0.75 0.75 0.75 1 0.75 0.75 0.75 1 0.25 0.25 0.25 0 0 0 0";

    final String OOPRange2 = "0.9 0.9 0.9 0.9 0.9 0.9 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 0.8 0 0 0 0 0 0 0 0 0.8 0 0 1 0 0 0 0 0 0 0.8 0 1 1 0 0 0 0 0 0 0 " +
            "0.8 1 1 1 0 0 0 0 0.8 0 0 0 0.8 0 0 0 0 0 0 0 0 0.8 0 0 0 0.8 0 0 1 0 0 0 0 0 0 0.8 0 0 0 0.8 0 1 1 0 0 0 0 0 0 0 0.8 0 0 0 0.8 1 1 1 0 0 0 0 0.8 0 0 0 0.8 0 " +
            "0 0 0.8 0 0 0 0 0 0 0 0 0.8 0 0 0 0.8 0 0 0 0.8 0 0 1 0 0 0 0 0 0 0.8 0 0 0 0.8 0 0 0 0.8 0 1 1 0 0 0 0 0 0 0 0.8 0 0 0 0.8 0 0 0 0.8 1 1 1 0 0 0 0 0 0 0 0" +
            " 0.8 0 0 0 0.8 0 0 0 0.8 0 0 0 0 0 0 0 0 0 0 0 0 0.8 0 0 0 0.8 0 0 0 0.8 0 0 0.9 0 0 0 0 0 0 0 0 0 0 0.8 0 0 0 0.8 0 0 0 0.8 0 0.9 0.9 0 0 0 0 0 0 0 0 0 0 " +
            "0 0.8 0 0 0 0.8 0 0 0 0.8 0.9 0.9 0.9 0 0 0 0 0 0 0 0 0.9 0 0 0 0.8 0 0 0 0.8 0 0 0 0.8 1 1 1 0 0 0 0 0 0 0 0 0 0.9 0 0 0 0.8 0 0 0 0.8 0 0 1 0.8 1 1 0.5 0 0" +
            " 0 0 0 0 0 0 0 0 0.9 0 0 0 0.8 0 0 0 0.8 0 1 1 0.8 1 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 0.8 0 0 0 0.8 1 1 1 0.8 0.5 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0" +
            " 0 0 0.9 0 0 0 0.8 1 1 1 0.8 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 0.9 0 0 1 0.8 1 1 1 0.8 1 1 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 0.9 0 1 1 0.8 1 1 " +
            "1 0.8 1 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 0.9 1 1 1 0.8 1 1 1 0.8 0.5 0.5 0.5 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 1 0 0 0 0.9 0 0 0 0.8 1 1 1 0.8 1" +
            " 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 1 0 0 0 0.9 0 0 1 0.8 1 1 1 0.8 1 1 0.3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 1 0 0 0 0.9 0 1 1 0.8 1 " +
            "1 1 0.8 1 0.3 0.3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.9 0 0 0 1 0 0 0 0.9 1 1 1 0.8 1 1 1 0.8 0.3 0.3 0.3 0 0 0 0 0.9 0 0 0 0.9 0 0 0 1 0 0 0 1 0 0 " +
            "0 1 0 0 0 0.9 0 0 0 0.8 1 1 1 0.8 1 1 1 0 0 0 0 0 0.9 0 0 0 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0.9 0 0 1 0.8 1 1 1 0.8 1 1 0.1 0 0 0 0 0 0 0.9 0 " +
            "0 0 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0.9 0 1 1 0.8 1 1 1 0.8 1 0.1 0.1 0 0 0 0 0 0 0 0.9 0 0 0 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0.9 1 1 1 0.8 1" +
            " 1 1 0.8 0.1 0.1 0.1 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 0.9 1 1 1 0.8 1 1 1 0.8 1 1 1 0 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 " +
            "1 0 0 0 1 0 0 1 1 1 1 1 0.9 1 1 1 0.8 1 1 1 0.8 1 1 0.1 0 0 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 1 1 0.9 1 1 1 0.8 1 1 1 0.8 1 0.1 0.1 0 0 " +
            "0 0.9 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 0.9 1 1 1 0.8 1 1 1 0.8 0.1 0.1 0.1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 " +
            "1 1 1 0.8 1 1 1 0.5 1 1 1 0.5 0.8 0.8 0.8 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 0.8 1 1 1 0.5 1 1 0.8 0.5 0.8 0.8 0.1 0 0 1" +
            " 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0.8 1 1 1 0.5 1 0.8 0.8 0.5 0.8 0.1 0.1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1" +
            " 1 1 1 1 1 1 1 1 1 1 0.8 1 1 1 0.5 0.8 0.8 0.8 0.5 0.1 0.1 0.1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.8 1 1 1 0.5 0.8 0.8 0.8" +
            " 0.1 0.5 0.5 0.5 0.1 0.1 0.1 0.1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.8 1 1 0.8 0.5 0.8 0.8 0.5 0.1 0.5 0.5 0.1 0.1 0.1 " +
            "0.1 0.1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.8 1 0.8 0.8 0.5 0.8 0.5 0.5 0.1 0.5 0.1 0.1 0.1 0.1 0.1 0.1 1 1 1 1 1 1 1 " +
            "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.8 0.8 0.8 0.8 0.5 0.5 0.5 0.5 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1";

    final String IPRange2 = "1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 " +
            "0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 1 0 0 " +
            "0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 1 0" +
            " 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0.5 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 0 1 0.3 0.3 0.3 0 0 0 0 0 0 0 " +
            "0 0 0.3 0 0 0 1 0 0 0 1 0 0 0.3 1 0.3 0.3 1 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0.3 0.3 1 0.3 1 1 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 0.3 0.3 0.3 1 1 " +
            "1 1 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 " +
            "0 0 0 1 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 " +
            "0 0 0 0 0 0 0 0 0 0 0" +
            " 0 0 0.3 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 1 1" +
            " 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0.3 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 " +
            "1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0.3 0 0 0 0.3 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 " +
            "1 1 1 1 1 1 1 1 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 1 " +
            "1 1 1 1 1 1 1 1 1 1 1 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0.5 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 " +
            "0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0.3 0.3 0.3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 " +
            "0 1 0 0 0.3 1 0.3 0.3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0.3 0.3 1 0.3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 " +
            "0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0.3 0.3 0.3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.5 0.5 0.5 1 0.5 0.5 0.5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 " +
            "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.5 1 0.5 0.5 0.5 1 0.5 0.5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.5 " +
            "0.5 1 0.5 0.5 0.5 1 0.5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.5 0.5 0.5 1 0.5 0.5 0.5 1 1 1 1 1 1 1 1 1 1 1 1 1 " +
            "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1";
}
